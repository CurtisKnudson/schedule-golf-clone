// @generated by protobuf-ts 2.2.2 with parameter long_type_number,generate_dependencies
// @generated from protobuf file "schedule_golf/authentication/v1alpha1/authentication.proto" (package "schedule_golf.authentication.v1alpha1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../google/rpc/status";
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.UserLoginResponse
 */
export interface UserLoginResponse {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string company_name = 2;
     */
    companyName: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string first_name = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.CreateNewUserRequest
 */
export interface CreateNewUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string company_name = 2;
     */
    companyName: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 4;
     */
    password: string;
    /**
     * @generated from protobuf field: string first_name = 5;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 6;
     */
    lastName: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.CreateNewUserResponse
 */
export interface CreateNewUserResponse {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string company_name = 2;
     */
    companyName: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string first_name = 4;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string last_name = 5;
     */
    lastName: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.UserTokenRefreshRequest
 */
export interface UserTokenRefreshRequest {
    /**
     * @generated from protobuf field: string jwt = 1;
     */
    jwt: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.UserTokenRefreshResponse
 */
export interface UserTokenRefreshResponse {
    /**
     * @generated from protobuf field: string jwt = 1;
     */
    jwt: string;
    /**
     * @generated from protobuf field: string expiration = 2;
     */
    expiration: string;
    /**
     * @generated from protobuf field: google.rpc.Status status = 3;
     */
    status?: Status;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.ForeUpAuthenticationRequest
 */
export interface ForeUpAuthenticationRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: string schedule_golf_jwt = 3;
     */
    scheduleGolfJwt: string;
}
/**
 * @generated from protobuf message schedule_golf.authentication.v1alpha1.ForeUpAuthenticationResponse
 */
export interface ForeUpAuthenticationResponse {
    /**
     * @generated from protobuf field: google.rpc.Status status = 2;
     */
    status?: Status;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserLoginRequest$Type extends MessageType<UserLoginRequest> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.UserLoginRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserLoginRequest>): UserLoginRequest {
        const message = { email: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserLoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserLoginRequest): UserLoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserLoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.UserLoginRequest
 */
export const UserLoginRequest = new UserLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserLoginResponse$Type extends MessageType<UserLoginResponse> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.UserLoginResponse", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserLoginResponse>): UserLoginResponse {
        const message = { userId: "", companyName: "", email: "", firstName: "", lastName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserLoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserLoginResponse): UserLoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserLoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string company_name = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string first_name = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.UserLoginResponse
 */
export const UserLoginResponse = new UserLoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNewUserRequest$Type extends MessageType<CreateNewUserRequest> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.CreateNewUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateNewUserRequest>): CreateNewUserRequest {
        const message = { userId: "", companyName: "", email: "", password: "", firstName: "", lastName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateNewUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNewUserRequest): CreateNewUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* string first_name */ 5:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 6:
                    message.lastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNewUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string company_name = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* string first_name = 5; */
        if (message.firstName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 6; */
        if (message.lastName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.CreateNewUserRequest
 */
export const CreateNewUserRequest = new CreateNewUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNewUserResponse$Type extends MessageType<CreateNewUserResponse> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.CreateNewUserResponse", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "company_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "first_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateNewUserResponse>): CreateNewUserResponse {
        const message = { userId: "", companyName: "", email: "", firstName: "", lastName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateNewUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNewUserResponse): CreateNewUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string company_name */ 2:
                    message.companyName = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string first_name */ 4:
                    message.firstName = reader.string();
                    break;
                case /* string last_name */ 5:
                    message.lastName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNewUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string company_name = 2; */
        if (message.companyName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.companyName);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string first_name = 4; */
        if (message.firstName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.firstName);
        /* string last_name = 5; */
        if (message.lastName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.lastName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.CreateNewUserResponse
 */
export const CreateNewUserResponse = new CreateNewUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserTokenRefreshRequest$Type extends MessageType<UserTokenRefreshRequest> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.UserTokenRefreshRequest", [
            { no: 1, name: "jwt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserTokenRefreshRequest>): UserTokenRefreshRequest {
        const message = { jwt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserTokenRefreshRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserTokenRefreshRequest): UserTokenRefreshRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jwt */ 1:
                    message.jwt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserTokenRefreshRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jwt = 1; */
        if (message.jwt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jwt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.UserTokenRefreshRequest
 */
export const UserTokenRefreshRequest = new UserTokenRefreshRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserTokenRefreshResponse$Type extends MessageType<UserTokenRefreshResponse> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.UserTokenRefreshResponse", [
            { no: 1, name: "jwt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expiration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<UserTokenRefreshResponse>): UserTokenRefreshResponse {
        const message = { jwt: "", expiration: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserTokenRefreshResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserTokenRefreshResponse): UserTokenRefreshResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string jwt */ 1:
                    message.jwt = reader.string();
                    break;
                case /* string expiration */ 2:
                    message.expiration = reader.string();
                    break;
                case /* google.rpc.Status status */ 3:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserTokenRefreshResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string jwt = 1; */
        if (message.jwt !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.jwt);
        /* string expiration = 2; */
        if (message.expiration !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.expiration);
        /* google.rpc.Status status = 3; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.UserTokenRefreshResponse
 */
export const UserTokenRefreshResponse = new UserTokenRefreshResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeUpAuthenticationRequest$Type extends MessageType<ForeUpAuthenticationRequest> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.ForeUpAuthenticationRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schedule_golf_jwt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ForeUpAuthenticationRequest>): ForeUpAuthenticationRequest {
        const message = { email: "", password: "", scheduleGolfJwt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForeUpAuthenticationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeUpAuthenticationRequest): ForeUpAuthenticationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* string schedule_golf_jwt */ 3:
                    message.scheduleGolfJwt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeUpAuthenticationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* string schedule_golf_jwt = 3; */
        if (message.scheduleGolfJwt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.scheduleGolfJwt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.ForeUpAuthenticationRequest
 */
export const ForeUpAuthenticationRequest = new ForeUpAuthenticationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForeUpAuthenticationResponse$Type extends MessageType<ForeUpAuthenticationResponse> {
    constructor() {
        super("schedule_golf.authentication.v1alpha1.ForeUpAuthenticationResponse", [
            { no: 2, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<ForeUpAuthenticationResponse>): ForeUpAuthenticationResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForeUpAuthenticationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForeUpAuthenticationResponse): ForeUpAuthenticationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 2:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForeUpAuthenticationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 2; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedule_golf.authentication.v1alpha1.ForeUpAuthenticationResponse
 */
export const ForeUpAuthenticationResponse = new ForeUpAuthenticationResponse$Type();
/**
 * @generated ServiceType for protobuf service schedule_golf.authentication.v1alpha1.AuthenticatorService
 */
export const AuthenticatorService = new ServiceType("schedule_golf.authentication.v1alpha1.AuthenticatorService", [
    { name: "UserLogin", options: {}, I: UserLoginRequest, O: UserLoginResponse },
    { name: "CreateNewUser", options: {}, I: CreateNewUserRequest, O: CreateNewUserResponse },
    { name: "UserTokenRefresh", options: {}, I: UserTokenRefreshRequest, O: UserTokenRefreshResponse },
    { name: "ForeUpAuthentication", options: {}, I: ForeUpAuthenticationRequest, O: ForeUpAuthenticationResponse }
]);
