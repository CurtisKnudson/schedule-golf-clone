// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: schedule_golf/authentication/v1alpha1/authentication.proto

package authenticationv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticatorServiceClient is the client API for AuthenticatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticatorServiceClient interface {
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	CreateNewUser(ctx context.Context, in *CreateNewUserRequest, opts ...grpc.CallOption) (*CreateNewUserResponse, error)
}

type authenticatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticatorServiceClient(cc grpc.ClientConnInterface) AuthenticatorServiceClient {
	return &authenticatorServiceClient{cc}
}

func (c *authenticatorServiceClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/schedule_golf.authentication.v1alpha1.AuthenticatorService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorServiceClient) CreateNewUser(ctx context.Context, in *CreateNewUserRequest, opts ...grpc.CallOption) (*CreateNewUserResponse, error) {
	out := new(CreateNewUserResponse)
	err := c.cc.Invoke(ctx, "/schedule_golf.authentication.v1alpha1.AuthenticatorService/CreateNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorServiceServer is the server API for AuthenticatorService service.
// All implementations should embed UnimplementedAuthenticatorServiceServer
// for forward compatibility
type AuthenticatorServiceServer interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	CreateNewUser(context.Context, *CreateNewUserRequest) (*CreateNewUserResponse, error)
}

// UnimplementedAuthenticatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticatorServiceServer struct {
}

func (UnimplementedAuthenticatorServiceServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedAuthenticatorServiceServer) CreateNewUser(context.Context, *CreateNewUserRequest) (*CreateNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewUser not implemented")
}

// UnsafeAuthenticatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticatorServiceServer will
// result in compilation errors.
type UnsafeAuthenticatorServiceServer interface {
	mustEmbedUnimplementedAuthenticatorServiceServer()
}

func RegisterAuthenticatorServiceServer(s grpc.ServiceRegistrar, srv AuthenticatorServiceServer) {
	s.RegisterService(&AuthenticatorService_ServiceDesc, srv)
}

func _AuthenticatorService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule_golf.authentication.v1alpha1.AuthenticatorService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticatorService_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServiceServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule_golf.authentication.v1alpha1.AuthenticatorService/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServiceServer).CreateNewUser(ctx, req.(*CreateNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticatorService_ServiceDesc is the grpc.ServiceDesc for AuthenticatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule_golf.authentication.v1alpha1.AuthenticatorService",
	HandlerType: (*AuthenticatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _AuthenticatorService_UserLogin_Handler,
		},
		{
			MethodName: "CreateNewUser",
			Handler:    _AuthenticatorService_CreateNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule_golf/authentication/v1alpha1/authentication.proto",
}
